#lang sicp

(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! item)
      (set! front-ptr item))
    (define (set-rear-ptr! item)
      (set! rear-ptr item))
    (define (empty-queue?)
      (null? front-ptr))
    (define (front-queue)
      (if (empty-queue? front-ptr)
          (error "Очередь пуста -- FRONT-QUEUE")
          (car front-ptr)))
    (define (insert-queue! item)
      (let ((new-ptr (cons item nil)))
        (cond ((empty-queue?)
               (set-front-ptr! new-ptr)
               (set-rear-ptr! new-ptr))
              (else
               (set-cdr! rear-ptr new-ptr)
               (set-rear-ptr! new-ptr))))
      (cons front-ptr rear-ptr))
    (define (delete-queue!)
      (if (empty-queue?)
          (error "Очередь пуста -- DELETE-QUEUE!")
          (set-front-ptr! (cdr front-ptr)))
      (cons front-ptr rear-ptr))
    (define (dispatch m)
      (cond ((eq? m 'empty-queue?) (empty-queue?))
            ((eq? m 'front-queue) (front-queue))
            ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) (delete-queue!))
            (else (error "Неизвестная операция -- DISPATCH"))))
    dispatch))

(define q (make-queue))
((q 'insert-queue!) 'a)
((q 'insert-queue!) 'b)
(q 'delete-queue!)
((q 'insert-queue!) 'c)
((q 'insert-queue!) 'd)
(q 'delete-queue!)
(q 'delete-queue!)
(q 'delete-queue!)
(q 'empty-queue?)
