#lang sicp

(define (make-ptr val) (list val '() '()))
(define empty-ptr '())
(define (empty-ptr? ptr) (null? ptr))
(define (value-ptr ptr) (car ptr))
(define (prev-ptr ptr) (cadr ptr))
(define (next-ptr ptr) (caddr ptr))
(define (set-prev-ptr! ptr prev)
  (set-car! (cdr ptr) prev))
(define (set-next-ptr! ptr next)
  (set-car! (cddr ptr) next))

(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))
(define (set-front-ptr! deque item) (set-car! deque item))
(define (set-rear-ptr! deque item) (set-cdr! deque item))

(define (make-deque) (cons empty-ptr empty-ptr))
(define (empty-deque? deque)
  (or (empty-ptr? (front-ptr deque))
      (empty-ptr? (rear-ptr deque))))
(define (front-deque deque)
  (if (empty-deque? deque)
      (error "Дек пустой -- FRONT-DEQUE")
      (value-ptr (front-ptr deque))))
(define (rear-deque deque)
  (if (empty-deque? deque)
      (error "Дек пустой -- REAR-DEQUE")
      (value-ptr (rear-ptr deque))))
(define (front-insert-deque! deque item)
  (let ((new-ptr (make-ptr item)))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-ptr)
           (set-rear-ptr! deque new-ptr))
          (else
           (set-next-ptr! new-ptr (front-ptr deque))
           (set-prev-ptr! (front-ptr deque) new-ptr)
           (set-front-ptr! deque new-ptr))))
  deque)
(define (rear-insert-deque! deque item)
  (let ((new-ptr (make-ptr item)))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-ptr)
           (set-rear-ptr! deque new-ptr))
          (else
           (set-prev-ptr! new-ptr (rear-ptr deque))
           (set-next-ptr! (rear-ptr deque) new-ptr)
           (set-rear-ptr! deque new-ptr))))
  deque)
(define (front-delete-deque! deque)
  (if (empty-deque? deque)
      (error "Дек пустой -- FRONT-DELETE-DEQUE")
      (begin (set-front-ptr! deque (next-ptr (front-ptr deque)))
             (if (not (empty-ptr? (front-ptr deque)))
                 (set-prev-ptr! (front-ptr deque) empty-ptr))))
  deque)
(define (rear-delete-deque! deque)
  (if (empty-deque? deque)
      (error "Дек пустой -- REAR-DELETE-DEQUE")
      (begin (set-rear-ptr! deque (prev-ptr (rear-ptr deque)))
             (if (not (empty-ptr? (rear-ptr deque)))
                 (set-next-ptr! (rear-ptr deque) empty-ptr))))
  deque)

(define (print-deque deque)
  (define (iter x)
    (if (null? x)
        (newline)
        (begin (display (value-ptr x))
               (display " ")
               (iter (next-ptr x)))))
  (if (empty-deque? deque)
      (newline)
      (iter (front-ptr deque))))

(define q (make-deque))
(front-insert-deque! q 'a)
(rear-delete-deque! q)
(print-deque (front-insert-deque! q 'a))
(print-deque (rear-delete-deque! q))
(print-deque (front-insert-deque! q 'b))
(print-deque (front-delete-deque! q))
(print-deque (rear-insert-deque! q 'c))
(print-deque (rear-insert-deque! q 'd))
(print-deque (front-delete-deque! q))
(print-deque (front-delete-deque! q))




                     
      